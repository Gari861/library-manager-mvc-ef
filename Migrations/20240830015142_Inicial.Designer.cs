// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebAppLibros.Models;

#nullable disable

namespace WebAppLibros.Migrations
{
    [DbContext(typeof(AppDBcontext))]
    [Migration("20240830015142_Inicial")]
    partial class Inicial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebAppLibros.Models.Categoria", b =>
                {
                    b.Property<int>("IdCategoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCategoria"));

                    b.HasKey("IdCategoria");

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("WebAppLibros.Models.Genero", b =>
                {
                    b.Property<int>("IdGenero")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdGenero"));

                    b.Property<string>("Detalle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdGenero");

                    b.ToTable("Generos");
                });

            modelBuilder.Entity("WebAppLibros.Models.Libro", b =>
                {
                    b.Property<int>("IdLibro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLibro"));

                    b.Property<int>("CantidadCopias")
                        .HasColumnType("int");

                    b.Property<int>("IdGenero")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdLibro");

                    b.HasIndex("IdGenero");

                    b.ToTable("Libros");
                });

            modelBuilder.Entity("WebAppLibros.Models.LibroCategoria", b =>
                {
                    b.Property<int>("IdLibro")
                        .HasColumnType("int");

                    b.Property<int>("IdCategoria")
                        .HasColumnType("int");

                    b.HasKey("IdLibro", "IdCategoria");

                    b.HasIndex("IdCategoria");

                    b.ToTable("LibroCategorias");
                });

            modelBuilder.Entity("WebAppLibros.Models.UbicacionBiblioteca", b =>
                {
                    b.Property<int>("IdUbicacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUbicacion"));

                    b.Property<string>("Estante")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdLibro")
                        .HasColumnType("int");

                    b.Property<string>("Seccion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdUbicacion");

                    b.HasIndex("IdLibro")
                        .IsUnique();

                    b.ToTable("UbicacionesBiblioteca");
                });

            modelBuilder.Entity("WebAppLibros.Models.Libro", b =>
                {
                    b.HasOne("WebAppLibros.Models.Genero", "Genero")
                        .WithMany("Libros")
                        .HasForeignKey("IdGenero")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genero");
                });

            modelBuilder.Entity("WebAppLibros.Models.LibroCategoria", b =>
                {
                    b.HasOne("WebAppLibros.Models.Categoria", "Categoria")
                        .WithMany("LibrosCategorias")
                        .HasForeignKey("IdCategoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAppLibros.Models.Libro", "Libro")
                        .WithMany("LibrosCategorias")
                        .HasForeignKey("IdLibro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Libro");
                });

            modelBuilder.Entity("WebAppLibros.Models.UbicacionBiblioteca", b =>
                {
                    b.HasOne("WebAppLibros.Models.Libro", "Libro")
                        .WithOne("UbicacionBiblioteca")
                        .HasForeignKey("WebAppLibros.Models.UbicacionBiblioteca", "IdLibro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Libro");
                });

            modelBuilder.Entity("WebAppLibros.Models.Categoria", b =>
                {
                    b.Navigation("LibrosCategorias");
                });

            modelBuilder.Entity("WebAppLibros.Models.Genero", b =>
                {
                    b.Navigation("Libros");
                });

            modelBuilder.Entity("WebAppLibros.Models.Libro", b =>
                {
                    b.Navigation("LibrosCategorias");

                    b.Navigation("UbicacionBiblioteca");
                });
#pragma warning restore 612, 618
        }
    }
}
